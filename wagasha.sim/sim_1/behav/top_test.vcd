$date
   Fri Jul 14 09:35:28 2017
$end
$version
  2016.4
$end
$timescale
  1ps
$end
$scope module test $end
$scope module top0 $end
$var wire 1 ! mclk $end
$var wire 1 " rst_n $end
$var wire 5 # btn [4:0] $end
$var wire 12 $ seg [11:0] $end
$var wire 1 % pc_we $end
$var wire 1 & reg_we $end
$var wire 1 ' mem_we $end
$var wire 4 ( pc_in [3:0] $end
$var wire 4 ) pc_out [3:0] $end
$var wire 32 * op [31:0] $end
$var wire 4 + dst [3:0] $end
$var wire 4 , src0 [3:0] $end
$var wire 4 - src1 [3:0] $end
$var wire 18 . dec_data [17:0] $end
$var wire 4 / alu_op [3:0] $end
$var wire 18 0 alu_out [17:0] $end
$var wire 1 1 zf $end
$var wire 1 2 zf_out $end
$var wire 1 3 sel1 $end
$var wire 1 4 sel2 $end
$var wire 18 5 sel1_out [17:0] $end
$var wire 18 6 sel2_out [17:0] $end
$var wire 18 7 reg_data0 [17:0] $end
$var wire 18 8 reg_data1 [17:0] $end
$var wire 18 9 cnt [17:0] $end
$var wire 18 : ord [17:0] $end
$var wire 1 ; comp $end
$var wire 18 < mem_data [17:0] $end
$var wire 1 = clk $end
$scope module s1 $end
$var wire 18 . in0 [17:0] $end
$var wire 18 7 in1 [17:0] $end
$var wire 1 3 sel $end
$var reg 18 > out [17:0] $end
$upscope $end
$scope module s2 $end
$var wire 18 0 in0 [17:0] $end
$var wire 18 < in1 [17:0] $end
$var wire 1 4 sel $end
$var reg 18 ? out [17:0] $end
$upscope $end
$scope module r0 $end
$var wire 1 = clk $end
$var wire 1 " rst_n $end
$var wire 1 & we $end
$var wire 4 , src0 [3:0] $end
$var wire 4 - src1 [3:0] $end
$var wire 4 + dst [3:0] $end
$var wire 18 6 data [17:0] $end
$var wire 18 7 data0 [17:0] $end
$var wire 18 8 data1 [17:0] $end
$var wire 18 9 cnt [17:0] $end
$var wire 18 : ord [17:0] $end
$var wire 1 ; comp $end
$upscope $end
$scope module a0 $end
$var wire 18 5 in0 [17:0] $end
$var wire 18 8 in1 [17:0] $end
$var wire 4 / op [3:0] $end
$var reg 1 @ zf $end
$var reg 18 A out [17:0] $end
$upscope $end
$scope module mem0 $end
$var wire 1 = clk $end
$var wire 1 " rst_n $end
$var wire 1 ' we $end
$var wire 18 0 in [17:0] $end
$var wire 18 8 addr [17:0] $end
$var wire 18 < out [17:0] $end
$var wire 4 B mem0 [3:0] $end
$var wire 4 C mem1 [3:0] $end
$var wire 4 D mem2 [3:0] $end
$var wire 4 E mem3 [3:0] $end
$var wire 4 F mem4 [3:0] $end
$var wire 4 G mem5 [3:0] $end
$var wire 4 H mem6 [3:0] $end
$var wire 4 I mem7 [3:0] $end
$var wire 4 J mem8 [3:0] $end
$var wire 4 K mem9 [3:0] $end
$var wire 4 L mem10 [3:0] $end
$var wire 4 M mem11 [3:0] $end
$var wire 4 N mem12 [3:0] $end
$var wire 4 O mem13 [3:0] $end
$var wire 4 P mem14 [3:0] $end
$var wire 4 Q mem15 [3:0] $end
$var integer 32 R i $end
$upscope $end
$scope module pc0 $end
$var wire 1 " rst_n $end
$var wire 1 = clk $end
$var wire 1 % we $end
$var wire 4 ( pc_in [3:0] $end
$var reg 4 S pc_out [3:0] $end
$upscope $end
$scope module imem0 $end
$var wire 4 ) pc_out [3:0] $end
$var reg 32 T op [31:0] $end
$upscope $end
$scope module zf0 $end
$var wire 1 = clk $end
$var wire 1 " rst_n $end
$var wire 1 1 zf_in $end
$var reg 1 U zf_out $end
$upscope $end
$scope module dec1 $end
$var wire 32 * op [31:0] $end
$var wire 1 2 zf $end
$var reg 1 V pc_we $end
$var reg 1 W reg_we $end
$var reg 1 X mem_we $end
$var reg 1 Y sel1 $end
$var reg 1 Z sel2 $end
$var reg 4 [ pc_in [3:0] $end
$var reg 4 \ alu_op [3:0] $end
$var reg 4 ] src0 [3:0] $end
$var reg 4 ^ src1 [3:0] $end
$var reg 4 _ dst [3:0] $end
$var reg 18 ` data [17:0] $end
$upscope $end
$scope module io0 $end
$var wire 1 ; comp $end
$var wire 1 = clk $end
$var wire 1 " rst_n $end
$var wire 18 9 cnt [17:0] $end
$var wire 18 : ord [17:0] $end
$var wire 5 # btn [4:0] $end
$var reg 12 a seg [11:0] $end
$var reg 5 b num [4:0] $end
$var reg 5 c btn_flag [4:0] $end
$var reg 2 d digit [1:0] $end
$var reg 12 e count [11:0] $end
$var parameter 12 f SEG_U [11:0] $end
$var parameter 12 g SEG_P [11:0] $end
$var parameter 12 h SEG_D [11:0] $end
$var parameter 12 i SEG_O [11:0] $end
$var parameter 12 j SEG_L [11:0] $end
$var parameter 12 k SEG_E [11:0] $end
$var parameter 12 l SEG_R [11:0] $end
$var parameter 12 m SEG_I [11:0] $end
$var parameter 12 n SEG_S [11:0] $end
$var parameter 12 o SEG_0 [11:0] $end
$var parameter 12 p SEG_1 [11:0] $end
$var parameter 12 q SEG_2 [11:0] $end
$var parameter 12 r SEG_3 [11:0] $end
$var parameter 12 s SEG_4 [11:0] $end
$var parameter 12 t SEG_5 [11:0] $end
$var parameter 12 u SEG_6 [11:0] $end
$var parameter 12 v SEG_7 [11:0] $end
$var parameter 12 w SEG_8 [11:0] $end
$var parameter 12 x SEG_9 [11:0] $end
$var parameter 28 y UE [27:0] $end
$var parameter 28 z SHITA [27:0] $end
$var parameter 28 { HIDARI [27:0] $end
$var parameter 28 | MIGI [27:0] $end
$upscope $end
$scope module div0 $end
$var wire 1 ! mclk $end
$var wire 1 " rst_n $end
$var wire 1 = clk $end
$var reg 2 } cnt [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
b0 #
bx $
x%
x&
x'
bx (
bx )
bx *
bx +
bx ,
bx -
bx .
bx /
bx 0
x1
x2
x3
x4
bx 5
bx 6
bx 7
bx 8
bx 9
bx :
z;
b0xxxx <
x=
bx >
bx ?
x@
bx A
bx B
bx C
bx D
bx E
bx F
bx G
bx H
bx I
bx J
bx K
bx L
bx M
bx N
bx O
bx P
bx Q
bx R
bx S
bx T
xU
xV
xW
xX
xY
xZ
bx [
bx \
bx ]
bx ^
bx _
bx `
bx a
bx b
bx c
bx d
bx e
b11000001 f
b10001100 g
b10100001 h
b10100011 i
b11000111 j
b10000110 k
b10001000 l
b11111001 m
b10010010 n
b11000000 o
b11111001 p
b10100100 q
b10110000 r
b10011001 s
b10010010 t
b10000010 u
b11011000 v
b10000000 w
b10010000 x
b0 y
b0 z
b0 {
b0 |
bx }
$end
#50000
1!
b0 $
0%
1&
0'
b0 (
b0 )
b100000000000000000000 *
b0 +
b0 ,
b1 -
b0 .
b0 /
01
02
03
04
b0 5
b1010011100101000 7
b0 8
b0 9
b0 :
b0 <
1=
b0 >
bx ?
0@
b0 B
b0 C
b0 D
b0 E
b0 F
b0 G
b0 H
b0 I
b0 J
b0 K
b0 L
b0 M
b0 N
b0 O
b0 P
b0 Q
b10000 R
b0 S
b100000000000000000000 T
0U
0V
1W
0X
0Y
0Z
b0 [
b0 \
b0 ]
b1 ^
b0 _
b0 `
b0 a
b0 b
b0 c
b0 d
b0 e
b0 }
#100000
0!
#150000
1!
1"
b1 }
#200000
0!
#250000
1!
0=
b10 }
#300000
0!
#350000
1!
b11 }
#400000
0!
#450000
1!
b1110xxxxxxxx $
1%
b1 (
b1 )
b10000000000000000000000000001 *
bx 7
b0 8
1=
b0 >
b1 S
b10000000000000000000000000001 T
0U
1V
b1 [
b1110xxxxxxxx a
b1 d
b1 e
b0 }
#500000
0!
#550000
1!
b1 }
#600000
0!
#650000
1!
0=
b10 }
#700000
0!
#750000
1!
b11 }
#800000
0!
#850000
1!
1=
b1 S
0U
b10 e
b0 }
#900000
0!
#950000
1!
b1 }
